package advent2022

import utils.Point

private var result = 0

fun main() {
    result = test("""
        ....#..
        ..###.#
        #...#.#
        .#...##
        #.###..
        ##.#.##
        .#..#..
    """.trimIndent())
    check(110, result)

    result = test("""
        ......#.##.###.###..##...#.###..###....##....#.#.#.#...#.#..#####.#..#.#..
        #######.##...##.##..#..##.#....#.###.##...#...##......######...#...###..#.
        ...#.#.##.#.##.#.#..#..#.#.##.######...###.....#.#.##..##..##.#..####..###
        .##.#.##.#.#.#..#.##.###..........###..#.##.....#..#####.#....#.##...#..##
        #.#...###...#.##.....#####.#.#.###..##.#...#..#.#.###.##......#.###.#####.
        ....##....#####..##.#....#.##.#.##....##.####..#.##...#..##..#.##....#.##.
        .......##.#..#..##...####.##.#..###.....##.##...#.....###.###...#....#....
        .####.##.##..#...##.##...###..####..####....#####.###.####....###.###.#...
        ####..##.#..##.###...####..#####....#.####.............##.###.......#....#
        ..........#...##....#.#####..#....##.###...####...##..###.##.#.##......###
        .........#.#.##.##..#.#.####.#.##.#.##..#...##..##...#.#####...##.#..#..#.
        ##..#...#..#.###.###..#....##.#......###...#.#...#.#.##...#####..##.###...
        .##.##......#.####..#..#...#.#..##..##..#..##..###.#.##.....#..##.###.#.#.
        .############...#.#.##..##...........#.######.#..####.####...###..#.#.#.#.
        #...##..##.....###.#...##..##..##.....#...#..###..###..####.#.#..#.##..###
        #...##.#.#..##.###.#.....####.#.#...#....#####.##...#.#.###....#.#.#.#..##
        ##.###..####.....#####..###.##..###..#####.#.#####.#.#...#.#...###.###.###
        ####...#.####..#.#.##..#..#..##..##.#.........#.#..##.####.###......#...##
        #....##.####.##.#.#.#.##.##..##.##.#.#.#......#.####.##..#..##..#..##..#..
        ..##...##.#.###.##..##.#..##.......#.####.#...#...#.#...###...#..####..###
        ##.#..####..#.#.##.##..#.##..##.......####...######.######...#....#.......
        ##....##.####..###.....####..###.#..#.######.##..###.#..##...#.###..#.###.
        .####.#.###########..###........#.#.##.##.###...#.##.#..###.#.#.....#####.
        ##.#.###..##....###...##.##....##.#.#..#.###.##..#.#...###...####.##..###.
        .#.#.#.###.#.###.....#..#.#######.......#.#.#.#######..####.#..###.#...#.#
        #..##..##.#.#.#.##....#.#.###.#..##.##..##.####.#.#.#.........##.#.#....##
        ###..#.#...#...##.###...#..#.#.#.#.###..#.###...#.#.###.######.##.##....##
        #.#....#.###.#.##..#...#..###.####..#.##..#.#.#.##...###...#.##..#.#.#####
        .....#.#.....#.###.#.##.#...#....##.#.#.#..#.#####.##..#.#..##.#.#####..##
        ...#......#.###.###...####..####...##...####.###.##...#...#######..#..##..
        ##.....#...####.#.#...#...#..##..#...#####.##.#..#....##.###.##....#.#.###
        #.####.#..##.#####.##..###.#..........###..#...#.#..##.#..####.....#......
        ....#.###.....#...#.#.##.##...####..##.#.##.#...###.#####.#..#.##.#.....##
        #.###.#....#..#.###..#..##..######.##.#.#.###.#.#.##..##...#.##..#..##...#
        ###..####.##...#..#.##...#...#...###.###..###.#...#..##.#.#.###..##.#..##.
        #.##.###..#....#....#..#.##.......###.###.#.###.##......#####..#...###.###
        #.#.#..#..#.#######.##..#....##....#.###.##...##...#..#.####.#.##..#....#.
        ##..##.###.#..#.#..#.#.#.#..#.##.###.#.##..##...###########..###.#.#..###.
        ..#..##..##########...#########.#.#.#......###......#.....#....##..######.
        .#.#...#..#..#....#.#.#...##..##.##.#....##....#..#...##..#.##...#...##.#.
        ##..#.#.#.####...##.####..###....#.#.##.#.#...#.##.#...######.##..#####.#.
        #.#..###...#..##..###.#.#.#..#..#.#.#...#.##.#....#...##.###.##.#..##.#..#
        #...#..##..#...#......####....#.#.##..#.##.###..##.##.#..#.#####.##.#.####
        .####....##.#..####..##.#..#.#.######.####..##.......###...#####.....#....
        ..#..##.#.#..#####...##.#....####...##.#.#.###.#.##.#..#.###..###.##..##..
        ###..###.##.#.......##...##..#..#.#..#.#.##..#.####.#.##..#.##.###.##..###
        #.....######.#...##...#.#.#####..#.######.....#..#..###..#.###....###..###
        #...##....###..#.#.##..#.###.##..####.#..#...#.#....##.#.####...#####.#.#.
        #.#.#...##.#######....#..###..####.#.#####....###.##.#...#.#####.#...###.#
        ####.#......#..#.#.##.####....#.#.##.#...#...##..#........###.###.##.#...#
        #####..##..##.#####....#.#.#..#.##......##.##...#.#...#.####.#.##.#####.##
        .#.#.####..##...#...#..##..#.#..###...#...#######..##.#####..#..#..#....##
        ###.....###..##.#..#####.#..#...###.##.##.###..#....#.....##.#.#.###...###
        ..#...######..##.#.#.#.########.###....#...#.##...#..##.#.##..###...#.###.
        ##..#....##..########.###..#..#.##..#######.#.#..#.#.##..##.#...##....#..#
        #.##..#....###...#.##..#.#.#..#.....#...####....####..##..#..#..#..#.##.#.
        ##...#...#.#..#...#..####.#...##..#..###.##.....#.##.##..#.##.##.#..#.####
        ####....####.##...#.##..#...##...#.##.####.....###.#.#.###...#.##.##.##.##
        #...#.#....#.#.#####.##.#.##.#...#.##.#...#...#.##..##...#...#..#...#..##.
        #..####.#..#...##.#.####..###...##.###.#######...#.....#..#.#####..##..##.
        ##.#...##..###########.....##.##..#...#.####....#.#....####.##.#.###.#.##.
        #...#..#.#####.#....#.##..###...#..#...#######.#...##..#..#.###..#.##.#..#
        ###.##...#.####....##.########......#...#...####.#..####.##.##..##..##....
        ##..###..#####...###..#.#...#..###....###.#..###....#.......#.###.#.#.#.##
        ........#.#....#..#.#...#...#####.####.....###...##.#.#...#.#..###...##..#
        #.....###.####....###.#.##.##.#.##..#.#...##..##.....#.#..#.###.##.#......
        ..#...##.#..###.###..#..##...#.#..#.#####.##..##..#..#.....#####.######..#
        ...#...##.#.#......###.####..#.##...#..#....##.#.####..#.#..#...#.##.#..#.
        .#.....##.#..####.###.#.#...#..#...#.##.#.#.#.####.##...#..###..####.#####
        ..##..##.#.##......#.#.####.#####.#.##..###.##........#....#..#.#..##.##..
        ..##..##...#..###...#..#.#...#.....###...##..###.###..##.#.#....#..#..##..
        ##.#..#.#.###....###..##...###.##.#..#####..##..##..#.......##..#.###..#..
        #..#.###.###.##.###.###....#..#..##.##.#.#.##.#.#....##.#..#.#.###.##.###.
        .##.#..#.###....##.####.##........#..####..#..#.....#.##..#.#..#..###.#..#
    """.trimIndent())
    check(4241, result)
}

private fun test(input: String): Int {
    var elves = mutableSetOf<Point>()
    var row = 1
    for (line in input.split("\n")) {
        var col = 1
        for (char in line) {
            if (char == '#') elves += Point(row, col)
            ++col
        }
        ++row
    }

    fun printElves() {
        val minX = elves.minBy { it.x }!!.x
        val maxX = elves.maxBy { it.x }!!.x
        val minY = elves.minBy { it.y }!!.y
        val maxY = elves.maxBy { it.y }!!.y
        for (row in minX..maxX) {
            for (col in minY..maxY) {
                if (Point(row, col) in elves) {
                    print('#')
                } else {
                    print('.')
                }
            }
            println()
        }
        println()
    }

    printElves()
    val directionsCount = Direction231.values().size
    var indexOfDirection = 0
    var round = 1
    var enoughSpace = false
    while (!enoughSpace) {
        enoughSpace = elves.all { elf ->
            elf.neighbors().all { neighbor -> neighbor !in elves }
        }
        if (!enoughSpace) {
            val newElves = mutableSetOf<Point>()

            val moves = mutableMapOf<Point, Point>()
            for (elf in elves) {
                val emptyAround = elf.neighbors().all { it !in elves }
                if (!emptyAround) {
                    for (k in indexOfDirection until indexOfDirection + directionsCount) {
                        val direction = Direction231.values()[k % directionsCount]
                        val neighbors = elf.neighbors(direction)
                        if (neighbors.all { it !in elves }) {
                            moves[elf] = elf.moveTo(direction)
                            break
                        }
                    }
                }
            }
            for (elf in elves) {
                val move = moves[elf]
                newElves += if (move == null) {
                    elf
                } else {
                    if (move !in moves.filterKeys { it != elf }.values) {
                        move
                    } else {
                        elf
                    }
                }
            }

            elves = newElves
            ++indexOfDirection
            println("round $round")
            printElves()
            if (round == 10) break
            ++round
        }
    }

    val minX = elves.minBy { it.x }!!.x
    val maxX = elves.maxBy { it.x }!!.x
    val minY = elves.minBy { it.y }!!.y
    val maxY = elves.maxBy { it.y }!!.y

    return (maxX - minX + 1) * (maxY - minY + 1) - elves.size
}

private fun Point.neighbors() = mutableSetOf<Point>().apply {
    val set = setOf(1, 0, -1)
    for (i in set) {
        for (j in set) {
            if (i != 0 || j != 0) this += Point(x + i, y + j)
        }
    }
}

private fun Point.neighbors(direction: Direction231) = mutableSetOf<Point>().apply {
    when (direction) {
        Direction231.N -> {
            this += Point(x - 1, y)
            this += Point(x - 1, y - 1)
            this += Point(x - 1, y + 1)
        }

        Direction231.S -> {
            this += Point(x + 1, y)
            this += Point(x + 1, y - 1)
            this += Point(x + 1, y + 1)
        }

        Direction231.E -> {
            this += Point(x - 1, y + 1)
            this += Point(x, y + 1)
            this += Point(x + 1, y + 1)
        }

        Direction231.W -> {
            this += Point(x - 1, y - 1)
            this += Point(x, y - 1)
            this += Point(x + 1, y - 1)
        }
    }
}

private fun Point.moveTo(direction: Direction231) = when (direction) {
    Direction231.N -> Point(x - 1, y)
    Direction231.S -> Point(x + 1, y)
    Direction231.E -> Point(x, y + 1)
    Direction231.W -> Point(x, y - 1)
}

private enum class Direction231 {
    N, S, W, E
}
