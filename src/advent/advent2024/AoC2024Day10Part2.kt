package advent.advent2024

import utils.Point

private var result = 0

fun main() {
    result = test(
        """
            89010123
            78121874
            87430965
            96549874
            45678903
            32019012
            01329801
            10456732
    """.trimIndent()
    )
    check(81, result)

    result = test(
        """
            210121012321234586543237650120901076540121001
            101234985490147897890198701221812389430430012
            567105676787458721209877654336765410321569123
            498014785010969630118960165445898923210678234
            309323494323874549823454278321080854100123945
            211234515690123678989923329876571765987637876
            110987601781010501677815410989432894543540345
            021010532782323432596506901098126545652901276
            012123445693437010487417892387087036761892987
            323098530696598923300306103456592123890743210
            014567621787127654211215296503431014125650309
            329643452650034018987894387112321265034321478
            498762167541005329876012379012450996543406567
            567433098932116456705430498763567887456715458
            016526187654327643212321567654654321019823309
            327817656783298984103435433216789670321094215
            438908943090125675678976124105894589452385434
            567617812181034106789780045674583076581276123
            106787801654323295610191230983012109690187012
            245096998745016784327898101092103298781298432
            332165432101565410678765432387654567654382321
            456976541001274328769867211498565650103401450
            697889034012389219654358300567656743212519567
            787765121965476101011249401456549865435658498
            657854320876210894320134562340134678321067019
            548943013456367885012021076543221589801354323
            038765412387478976523256789601100499832231234
            129914302198565985430143898702341300740140145
            878801243089478876943232169219654211655657656
            965760651078769217854321078348778902598748912
            054450782369854308765010127651267143456732103
            123321895451043219678098763410356012349801654
            103456986032112008769123452345441078959798723
            212387872149800123452101011096732163478760810
            301095433458945654343000125687823454307451923
            454346721567238769289210234776916543210312367
            965239810123189378176321349885407892321208498
            870125676034003210065443456790398901765089567
            345676787165612349898652105381210340894176506
            210985696278973656776789965450678256783215410
            101974320161087298785649874367589109891006321
            007876013232196105694234701298432098782107890
            012565434983435234523105650165601105673456921
            323476325876524321012023498074320234504305430
            434789016789012010123110567789210343212214321
    """.trimIndent()
    )
    check(1192, result)
}

private fun test(input: String): Int {
    val map = input.split("\n")
    val height = map.size
    val width = map[0].length

    fun findTrailheads(): Set<Point> {
        val results = mutableSetOf<Point>()
        for (x in 0..<height) {
            for (y in 0..<width) {
                if (map[x][y] == '0') {
                    results += Point(x, y)
                }
            }
        }
        return results
    }

    fun isInsideMap(point: Point): Boolean {
        return point.x in 0..<height && point.y in 0..<width
    }

    fun Point.generateNext(): Set<Point> {
        val results = mutableSetOf<Point>()
        val set = setOf(Point(0, 1), Point(1, 0), Point(0, -1), Point(-1, 0))
        val currentValue = map[x][y]
        val nextValue = currentValue + 1
        for (delta in set) {
            val next = Point(x + delta.x, y + delta.y)
            if (isInsideMap(next) && map[next.x][next.y] == nextValue) {
                results += next
            }
        }
        return results
    }

    fun dfs(currentPath: List<Point>, paths: MutableList<List<Point>>) {
        val last = currentPath.last()
        if (map[last.x][last.y] == '9') {
            paths += currentPath
        } else {
            val next = last.generateNext()
            for (nextPoint in next) {
                val newPath = mutableListOf<Point>()
                newPath += currentPath
                newPath += nextPoint
                dfs(newPath, paths)
            }
        }
    }

    fun findRating(trailhead: Point): Int {
        val paths = mutableListOf<List<Point>>()
        val currentPath = mutableListOf<Point>()
        currentPath += trailhead
        dfs(currentPath, paths)
        return paths.size
    }

    return findTrailheads().map { findRating(it) }.sum()
}
