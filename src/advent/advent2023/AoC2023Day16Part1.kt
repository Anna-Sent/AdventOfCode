package advent.advent2023

import utils.Direction
import utils.Point

private var result = 0

fun main() {
    result = test(
        """
            .|...\....
            |.-.\.....
            .....|-...
            ........|.
            ..........
            .........\
            ..../.\\..
            .-.-/..|..
            .|....-|.\
            ..//.|....
    """.trimIndent()
    )
    check(46, result)

    result = test(
        """
            \.....................\.......................|..../......-.........../.|.....\.............|..........|..\...
            .../...................\..................../...|.......|........||...................../...........\.........
            ././....|......./................\............|..\...........-....../............../|........-................
            ....\..\...........-/..|......|......\............|............../.................-........./...-...|.......\
            ..................................|.\.......|...../.........................-...../......\..|...............\.
            .....\.............................................|../.\............../--.......................\............
            |.......-.|........\.................\..............|........./....\.........|...................\-.-...|.....
            ....\........./....-.........................--.....\..../......................|.\......................\...-
            \..-..../.....|..........\......................-|......|...................../...../........./...........-...
            ........................\.\|......../........../......................\.............|./../....................
            .....\...................|.............................|......-........|.........-./.../.|....................
            ..-................./.........................................\..\........-..-........-.......\../............
            -................-............................\................./..--................-............../.|.......
            ..-.....|.............|................./.......-.-........................-............-...........\.........
            ..........|..........................-...|..\...............................................\-....\...........
            /................../..........|....\..-......................../....\...\..........-....../.........../.....\.
            ................\....-................-|.\...-...........-.....-........\..........................\..........
            ...................................\../..|.../../...........................\.........../.\-......|.........-.
            /....|....|..........................\............./.....|/................./....-......................-.....
            ....-.............../.....|...........|../......\../.............../........................|............./...
            ......./..............|./../.................-.\.........../.....................|.........../........\.......
            ...................-...............\/.......|........|....................../.......................-/......\.
            ................\...../....-/......-.........-.....\/.\...............\....../...-....|......|.........\......
            ....-.........-.........................-......................../.......|...............................\....
            ......../..................|...../......\..\..-|-..../..............|......../............|.-.......-.........
            ......./............-..........-............................../.........................|\..-..-\.\......-..\.
            .\-.....|......................-..\................/.-................|.\..............\..................|...
            -..........................-............../.|.-......\......-..-...../......./................................
            ....|.................................................\....|..........\...................-......|........./..
            ................../...........-..............\......................................|.-........|..............
            ...-............|..............-...........-.\.......................|..|..../......................../.|....-
            .......-..-......./...../.........-.......\.....-.../............-./......../.../............-.....|...|......
            ...............|.........../..........|/..........|..........-.-...../...../..|..........\.....-./.|./....|...
            .........|......................\.|.....|......................-.-........|.............................-...|.
            .-...|..\...-...............\..............\......./........-............/.-..\........../...../....-....\....
            ...........\.-.......|.......|....-.............|-.|........../..../...\....\............|.|..|\..............
            .....................|.\....|......|../...\......|........................\......|.......-./..../.............
            ......................\--................................\.................|................-.................
            -...............\...-.....................................-.\...../....\...........................|..........
            .....|.......\.......................-/...\..-.........-..../\|..................\........-...................
            ..|........./....|..-./..\..\................-|..........\../......\...............\............\............|
            ......-................../.............|.............\................................-..\...../........-.....
            ....................../......../..\.-.........................|....\..|...\...../../.....|............../.....
            ...\................................/..............................\........|.........\.-............\........
            /.................../................-...........-.|.............\.................................|.....-....
            .|...-..|/./../.........-./.............................................../..........-.........-.|./..........
            ..../..................|......................|../..........\........-......../.........\...|.................
            ........./..................|..-..........|\............\......-..-..\...|....|.....................|....-....
            .....|/....|........\.........-................../..........|............|...........-.....|......./......//..
            ..........\.|../...|........................\.........\.|......||....-...............\\.....|.|..............|
            ............-................|.....-....||......../.../.......................|..\...........\................
            ...............-..../......-..../.......|-.....-.....\..................................../..|................
            /......-...............\/...././..................\..................\..........-......................|......
            ...................\.....\.................\...|.................-............/........-..............\./.....
            .-.\....\........\........-../.-............../...../..-..|...................../.-.....\.....-........../..\.
            |...|...............................|............../.............../....................|...../...............
            ....../....../...|..............-.-........-..|.../....................\|.....\......................|....../.
            ...\\.......|...|-............|..........-...........................................\/...../..-.-............
            .........|.............|..|......\............\...............|......\......\.............\...\-.......\.....\
            ...........\..-.|.......|\..\..................-........\/...............................-....................
            ...\.................\..............................................\...............\.......-.../.............
            ..\.............\....---....................//.......................................|./.............../\.....
            .\...........|..................................\........-......|.........\.................-........-........
            ..............-...............-.../....-........|.....-../......................./..../........../../--..\....
            .........-......\......-.........../...\./.|.................\...................--..-........|..\......\....|
            ....../.........................................|...../........../..............\\...-/.......-......\..\.....
            .........../...\.|..................../.\.................|......\.\..|.........../...../.....\.\...........|.
            ..../\..-...../.............................../..../............................-...-......\...........\......
            ..-..\.............................\...........|..........|.........|..........................-......./......
            -..|.................-\.....\...............\/.....|...........................././...\......\.......\...-....
            ......\..............|..|..............-............../....................-....\\........\....|..............
            |.............\....\./.....-|-....\.....\..............\/........-.|..|...........-..\......-..../.......|....
            ............................-.......................|........................../................|.............
            /................|../............\/.....\/....-.....\......\...../|..\..........|............../..............
            .|....../...../....................../..|.....................-................./...../-.........-............
            ......................\|........../......./..\........\.........-......../.........../.|/.......\.../.........
            ...............\......-|............\..\....../.........\.....|...|\............/............\.\..|.......\...
            ......|...........\....../....\./......./-....\../.......\...-...............\./...\.....-.......-..../.......
            ...|..|.............................\.....-.|........./......../......................-......./............\..
            .....|........\.........|...-.-.........\..../....../..-.......-...............\..../.....-..../..............
            ........./.\/........................-..........\.....................|.......-..............\./.\............
            ..../................/................................|.....||..............\........-...............|........
            ....\./.........../\-.....-...\............//.\..............\...../................|.....\..-................
            ..../|........./............|.....................|......................-..|...............................\.
            ..................\............................\.......\.........-.............|...../.-.............-......|.
            ..............|.-...........................\.\./.......\........../...\................/....-................
            .......|................/-............\............/...........-..../...........\......../...\.......\........
            ..............|..../......................-...........-..\.................................................-..
            ..............................-..-................-.......-.................-..........\.../...............|..
            ......-.........-........................./.....................\....|........................................
            .....\........./.....-.................../................|...................|........................|......
            ........../.../........................./.|................-...........\...........-....|.....................
            .....-.......\././/.......|..............|......../..\...........\.............................-......|../-.-.
            ........|-....-....................\.....|\...\/.....\........\......./..........|.\-..|......................
            ../...-...-...|...../............\.......................-..........\...\.....-...\...............|....../...|
            ............|..\....|..................\/...................../../....|...................|.............../...
            .............-................./............|.......|............\....................................\.-.....
            -...../|..............-......\..../..................|..\....-............................................\...
            ........|.........-........\................/....\..................../.|...................................|.
            .....|................./.........-|\...-...................|....-................-......../...............|..-
            .|.........|...........|...-.............................\............................|................\......
            ....|.....-......|......./.-.|...........\..-........|.........................-....-..-.....|................
            ........................................\.....................-.../........................../../..........|..
            -................/....\.......//....-........................../.\.........-......./..|\..........\...........
            -............................./......................................../-...........................\|........
            ........................................../-.....//......\......\...........\........|./....../.......--......
            ../..............-....../......../................../......./....-...........|../.......\.\.......-......./..\
            ..............-............../......|.........-...............|................................-..........\...
            .....................\..........|..\......|...............................................-...................
            ...../..|.../.........|.../.......-...................................\.....................................|.
    """.trimIndent()
    )
    check(7517, result)
}

private fun test(input: String): Int {
    val map = input.split("\n")
    val width = map[0].length
    val height = map.size

    var positions = mutableListOf<Pair<Point, Direction>>()
    val pairs = mutableSetOf<Pair<Point, Direction>>()
    val points = mutableSetOf<Point>()

    val startPoint = Point(0, 0)
    val startDirection = Direction.R
    positions += startPoint to startDirection
    pairs += startPoint to startDirection
    points += Point(0, 0)

    fun Point.isValid() = x in 0 until width && y in 0 until height

    while (positions.isNotEmpty()) {
        val newPositions = mutableListOf<Pair<Point, Direction>>()

        fun Pair<Point, Direction>.add() {
            if (this.first.isValid() && this !in pairs) {
                newPositions += this
                pairs += this
                points += this.first
            }
        }

        for (position in positions) {
            when (position.second) {
                Direction.R -> {
                    when (map[position.first.y][position.first.x]) {
                        '.' -> {
                            (Point(position.first.x + 1, position.first.y) to position.second).add()
                        }

                        '-' -> {
                            (Point(position.first.x + 1, position.first.y) to position.second).add()
                        }

                        '|' -> {
                            (Point(position.first.x, position.first.y - 1) to Direction.U).add()
                            (Point(position.first.x, position.first.y + 1) to Direction.D).add()
                        }

                        '\\' -> {
                            (Point(position.first.x, position.first.y + 1) to Direction.D).add()
                        }

                        '/' -> {
                            (Point(position.first.x, position.first.y - 1) to Direction.U).add()
                        }
                    }
                }

                Direction.L -> {
                    when (map[position.first.y][position.first.x]) {
                        '.' -> {
                            (Point(position.first.x - 1, position.first.y) to position.second).add()
                        }

                        '-' -> {
                            (Point(position.first.x - 1, position.first.y) to position.second).add()
                        }

                        '|' -> {
                            (Point(position.first.x, position.first.y - 1) to Direction.U).add()
                            (Point(position.first.x, position.first.y + 1) to Direction.D).add()
                        }

                        '\\' -> {
                            (Point(position.first.x, position.first.y - 1) to Direction.U).add()
                        }

                        '/' -> {
                            (Point(position.first.x, position.first.y + 1) to Direction.D).add()
                        }
                    }
                }

                Direction.D -> {
                    when (map[position.first.y][position.first.x]) {
                        '.' -> {
                            (Point(position.first.x, position.first.y + 1) to position.second).add()
                        }

                        '-' -> {
                            (Point(position.first.x - 1, position.first.y) to Direction.L).add()
                            (Point(position.first.x + 1, position.first.y) to Direction.R).add()
                        }

                        '|' -> {
                            (Point(position.first.x, position.first.y + 1) to position.second).add()
                        }

                        '\\' -> {
                            (Point(position.first.x + 1, position.first.y) to Direction.R).add()
                        }

                        '/' -> {
                            (Point(position.first.x - 1, position.first.y) to Direction.L).add()
                        }
                    }
                }

                Direction.U -> {
                    when (map[position.first.y][position.first.x]) {
                        '.' -> {
                            (Point(position.first.x, position.first.y - 1) to position.second).add()
                        }

                        '-' -> {
                            (Point(position.first.x - 1, position.first.y) to Direction.L).add()
                            (Point(position.first.x + 1, position.first.y) to Direction.R).add()
                        }

                        '|' -> {
                            (Point(position.first.x, position.first.y - 1) to position.second).add()
                        }

                        '\\' -> {
                            (Point(position.first.x - 1, position.first.y) to Direction.L).add()
                        }

                        '/' -> {
                            (Point(position.first.x + 1, position.first.y) to Direction.R).add()
                        }
                    }
                }
            }
        }

        positions = newPositions
    }

    return points.size
}
