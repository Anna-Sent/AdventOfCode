package advent2023

import utils.Point
import kotlin.math.max

private var result = 0

fun main() {
    result = test(
        """
            .|...\....
            |.-.\.....
            .....|-...
            ........|.
            ..........
            .........\
            ..../.\\..
            .-.-/..|..
            .|....-|.\
            ..//.|....
    """.trimIndent()
    )
    check(51, result)

    result = test(
        """
            \.....................\.......................|..../......-.........../.|.....\.............|..........|..\...
            .../...................\..................../...|.......|........||...................../...........\.........
            ././....|......./................\............|..\...........-....../............../|........-................
            ....\..\...........-/..|......|......\............|............../.................-........./...-...|.......\
            ..................................|.\.......|...../.........................-...../......\..|...............\.
            .....\.............................................|../.\............../--.......................\............
            |.......-.|........\.................\..............|........./....\.........|...................\-.-...|.....
            ....\........./....-.........................--.....\..../......................|.\......................\...-
            \..-..../.....|..........\......................-|......|...................../...../........./...........-...
            ........................\.\|......../........../......................\.............|./../....................
            .....\...................|.............................|......-........|.........-./.../.|....................
            ..-................./.........................................\..\........-..-........-.......\../............
            -................-............................\................./..--................-............../.|.......
            ..-.....|.............|................./.......-.-........................-............-...........\.........
            ..........|..........................-...|..\...............................................\-....\...........
            /................../..........|....\..-......................../....\...\..........-....../.........../.....\.
            ................\....-................-|.\...-...........-.....-........\..........................\..........
            ...................................\../..|.../../...........................\.........../.\-......|.........-.
            /....|....|..........................\............./.....|/................./....-......................-.....
            ....-.............../.....|...........|../......\../.............../........................|............./...
            ......./..............|./../.................-.\.........../.....................|.........../........\.......
            ...................-...............\/.......|........|....................../.......................-/......\.
            ................\...../....-/......-.........-.....\/.\...............\....../...-....|......|.........\......
            ....-.........-.........................-......................../.......|...............................\....
            ......../..................|...../......\..\..-|-..../..............|......../............|.-.......-.........
            ......./............-..........-............................../.........................|\..-..-\.\......-..\.
            .\-.....|......................-..\................/.-................|.\..............\..................|...
            -..........................-............../.|.-......\......-..-...../......./................................
            ....|.................................................\....|..........\...................-......|........./..
            ................../...........-..............\......................................|.-........|..............
            ...-............|..............-...........-.\.......................|..|..../......................../.|....-
            .......-..-......./...../.........-.......\.....-.../............-./......../.../............-.....|...|......
            ...............|.........../..........|/..........|..........-.-...../...../..|..........\.....-./.|./....|...
            .........|......................\.|.....|......................-.-........|.............................-...|.
            .-...|..\...-...............\..............\......./........-............/.-..\........../...../....-....\....
            ...........\.-.......|.......|....-.............|-.|........../..../...\....\............|.|..|\..............
            .....................|.\....|......|../...\......|........................\......|.......-./..../.............
            ......................\--................................\.................|................-.................
            -...............\...-.....................................-.\...../....\...........................|..........
            .....|.......\.......................-/...\..-.........-..../\|..................\........-...................
            ..|........./....|..-./..\..\................-|..........\../......\...............\............\............|
            ......-................../.............|.............\................................-..\...../........-.....
            ....................../......../..\.-.........................|....\..|...\...../../.....|............../.....
            ...\................................/..............................\........|.........\.-............\........
            /.................../................-...........-.|.............\.................................|.....-....
            .|...-..|/./../.........-./.............................................../..........-.........-.|./..........
            ..../..................|......................|../..........\........-......../.........\...|.................
            ........./..................|..-..........|\............\......-..-..\...|....|.....................|....-....
            .....|/....|........\.........-................../..........|............|...........-.....|......./......//..
            ..........\.|../...|........................\.........\.|......||....-...............\\.....|.|..............|
            ............-................|.....-....||......../.../.......................|..\...........\................
            ...............-..../......-..../.......|-.....-.....\..................................../..|................
            /......-...............\/...././..................\..................\..........-......................|......
            ...................\.....\.................\...|.................-............/........-..............\./.....
            .-.\....\........\........-../.-............../...../..-..|...................../.-.....\.....-........../..\.
            |...|...............................|............../.............../....................|...../...............
            ....../....../...|..............-.-........-..|.../....................\|.....\......................|....../.
            ...\\.......|...|-............|..........-...........................................\/...../..-.-............
            .........|.............|..|......\............\...............|......\......\.............\...\-.......\.....\
            ...........\..-.|.......|\..\..................-........\/...............................-....................
            ...\.................\..............................................\...............\.......-.../.............
            ..\.............\....---....................//.......................................|./.............../\.....
            .\...........|..................................\........-......|.........\.................-........-........
            ..............-...............-.../....-........|.....-../......................./..../........../../--..\....
            .........-......\......-.........../...\./.|.................\...................--..-........|..\......\....|
            ....../.........................................|...../........../..............\\...-/.......-......\..\.....
            .........../...\.|..................../.\.................|......\.\..|.........../...../.....\.\...........|.
            ..../\..-...../.............................../..../............................-...-......\...........\......
            ..-..\.............................\...........|..........|.........|..........................-......./......
            -..|.................-\.....\...............\/.....|...........................././...\......\.......\...-....
            ......\..............|..|..............-............../....................-....\\........\....|..............
            |.............\....\./.....-|-....\.....\..............\/........-.|..|...........-..\......-..../.......|....
            ............................-.......................|........................../................|.............
            /................|../............\/.....\/....-.....\......\...../|..\..........|............../..............
            .|....../...../....................../..|.....................-................./...../-.........-............
            ......................\|........../......./..\........\.........-......../.........../.|/.......\.../.........
            ...............\......-|............\..\....../.........\.....|...|\............/............\.\..|.......\...
            ......|...........\....../....\./......./-....\../.......\...-...............\./...\.....-.......-..../.......
            ...|..|.............................\.....-.|........./......../......................-......./............\..
            .....|........\.........|...-.-.........\..../....../..-.......-...............\..../.....-..../..............
            ........./.\/........................-..........\.....................|.......-..............\./.\............
            ..../................/................................|.....||..............\........-...............|........
            ....\./.........../\-.....-...\............//.\..............\...../................|.....\..-................
            ..../|........./............|.....................|......................-..|...............................\.
            ..................\............................\.......\.........-.............|...../.-.............-......|.
            ..............|.-...........................\.\./.......\........../...\................/....-................
            .......|................/-............\............/...........-..../...........\......../...\.......\........
            ..............|..../......................-...........-..\.................................................-..
            ..............................-..-................-.......-.................-..........\.../...............|..
            ......-.........-........................./.....................\....|........................................
            .....\........./.....-.................../................|...................|........................|......
            ........../.../........................./.|................-...........\...........-....|.....................
            .....-.......\././/.......|..............|......../..\...........\.............................-......|../-.-.
            ........|-....-....................\.....|\...\/.....\........\......./..........|.\-..|......................
            ../...-...-...|...../............\.......................-..........\...\.....-...\...............|....../...|
            ............|..\....|..................\/...................../../....|...................|.............../...
            .............-................./............|.......|............\....................................\.-.....
            -...../|..............-......\..../..................|..\....-............................................\...
            ........|.........-........\................/....\..................../.|...................................|.
            .....|................./.........-|\...-...................|....-................-......../...............|..-
            .|.........|...........|...-.............................\............................|................\......
            ....|.....-......|......./.-.|...........\..-........|.........................-....-..-.....|................
            ........................................\.....................-.../........................../../..........|..
            -................/....\.......//....-........................../.\.........-......./..|\..........\...........
            -............................./......................................../-...........................\|........
            ........................................../-.....//......\......\...........\........|./....../.......--......
            ../..............-....../......../................../......./....-...........|../.......\.\.......-......./..\
            ..............-............../......|.........-...............|................................-..........\...
            .....................\..........|..\......|...............................................-...................
            ...../..|.../.........|.../.......-...................................\.....................................|.
    """.trimIndent()
    )
    check(7741, result)
}

private enum class Direction2 { R, U, D, L }

private fun test(input: String): Int {
    val map = input.split("\n")
    val width = map[0].length
    val height = map.size

    fun start(startPoint: Point, startDirection: Direction2): Int {
        var positions = mutableListOf<Pair<Point, Direction2>>()
        val pairs = mutableSetOf<Pair<Point, Direction2>>()
        val points = mutableSetOf<Point>()

        positions += startPoint to startDirection
        pairs += startPoint to startDirection
        points += startPoint

        fun Point.isValid() = x in 0 until width && y in 0 until height

        while (positions.isNotEmpty()) {
            val newPositions = mutableListOf<Pair<Point, Direction2>>()

            fun Pair<Point, Direction2>.add() {
                if (this.first.isValid() && this !in pairs) {
                    newPositions += this
                    pairs += this
                    points += this.first
                }
            }

            for (position in positions) {
                when (position.second) {
                    Direction2.R -> {
                        when (map[position.first.y][position.first.x]) {
                            '.' -> {
                                (Point(position.first.x + 1, position.first.y) to position.second).add()
                            }

                            '-' -> {
                                (Point(position.first.x + 1, position.first.y) to position.second).add()
                            }

                            '|' -> {
                                (Point(position.first.x, position.first.y - 1) to Direction2.U).add()
                                (Point(position.first.x, position.first.y + 1) to Direction2.D).add()
                            }

                            '\\' -> {
                                (Point(position.first.x, position.first.y + 1) to Direction2.D).add()
                            }

                            '/' -> {
                                (Point(position.first.x, position.first.y - 1) to Direction2.U).add()
                            }
                        }
                    }

                    Direction2.L -> {
                        when (map[position.first.y][position.first.x]) {
                            '.' -> {
                                (Point(position.first.x - 1, position.first.y) to position.second).add()
                            }

                            '-' -> {
                                (Point(position.first.x - 1, position.first.y) to position.second).add()
                            }

                            '|' -> {
                                (Point(position.first.x, position.first.y - 1) to Direction2.U).add()
                                (Point(position.first.x, position.first.y + 1) to Direction2.D).add()
                            }

                            '\\' -> {
                                (Point(position.first.x, position.first.y - 1) to Direction2.U).add()
                            }

                            '/' -> {
                                (Point(position.first.x, position.first.y + 1) to Direction2.D).add()
                            }
                        }
                    }

                    Direction2.D -> {
                        when (map[position.first.y][position.first.x]) {
                            '.' -> {
                                (Point(position.first.x, position.first.y + 1) to position.second).add()
                            }

                            '-' -> {
                                (Point(position.first.x - 1, position.first.y) to Direction2.L).add()
                                (Point(position.first.x + 1, position.first.y) to Direction2.R).add()
                            }

                            '|' -> {
                                (Point(position.first.x, position.first.y + 1) to position.second).add()
                            }

                            '\\' -> {
                                (Point(position.first.x + 1, position.first.y) to Direction2.R).add()
                            }

                            '/' -> {
                                (Point(position.first.x - 1, position.first.y) to Direction2.L).add()
                            }
                        }
                    }

                    Direction2.U -> {
                        when (map[position.first.y][position.first.x]) {
                            '.' -> {
                                (Point(position.first.x, position.first.y - 1) to position.second).add()
                            }

                            '-' -> {
                                (Point(position.first.x - 1, position.first.y) to Direction2.L).add()
                                (Point(position.first.x + 1, position.first.y) to Direction2.R).add()
                            }

                            '|' -> {
                                (Point(position.first.x, position.first.y - 1) to position.second).add()
                            }

                            '\\' -> {
                                (Point(position.first.x - 1, position.first.y) to Direction2.L).add()
                            }

                            '/' -> {
                                (Point(position.first.x + 1, position.first.y) to Direction2.R).add()
                            }
                        }
                    }
                }
            }

            positions = newPositions
        }

        return points.size
    }

    var maxx = 0
    for (x in 0 until width) {
        maxx = max(maxx, start(Point(x, 0), Direction2.D))
        maxx = max(maxx, start(Point(x, height - 1), Direction2.U))
    }
    for (y in 0 until height) {
        maxx = max(maxx, start(Point(0, y), Direction2.R))
        maxx = max(maxx, start(Point(width - 1, y), Direction2.L))
    }

    return maxx
}
