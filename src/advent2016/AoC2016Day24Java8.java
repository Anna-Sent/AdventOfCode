package advent2016;

import java.util.*;
import java.util.stream.Collectors;

public class AoC2016Day24Java8 {
    private static final String INPUT = "###################################################################################################################################################################################\n" +
            "#...............#.........#...#...#.......#.......#.#...#.........#...........#...............#.#.#.......#.......#.....#...........#...#...#.......#.......#...#....2#...........#\n" +
            "#.#.#.#.#.###.#.#####.#.#.#.###.#.#.#######.###.#.#.#.#.#.#.###.#.#.###.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.#.#.#.#.###.#.#.#.#####.###.#.#.#.#.#.#.#####.#.#.###.#######\n" +
            "#....1#...#.#...#.......#.......#...#.......#.....#...#.#...#...#.......#.............#.....#...#.#.........#...#.....#.....#.........#...#...#.....#...#.#...#.#.#...#.........#.#\n" +
            "#######.#.#.###.#.#######.#####.#.#.#.#.###.#.###.#.#####.#.#.#.#.#.#########.###.#.#.#.###.#.#.#.###.#.###.#.#.#.#.#.#######.#.###########.#.#.###.#.###.#.#.#.#.#.#.#.###.#.#.#.#\n" +
            "#...#.....#.#...#.......#.#...#.....#.....#.......#.#...#...........#.........#.....#.........#.#.#...#.....#.....#.......#...#.............#...#.#.#.....#...#.#...#.#.....#.....#\n" +
            "#.###.###.#.#.#.#####.#.#.#.#.#.#.#.#.###.###.#.#.#.#.#.###.#.###.#####.#.#####.###.#####.#.#.#.#.#.#.#####.#.###.#.###.#.###.#.#.###.#.#.#.#.#.#.###.###.#.###.#.###########.#.###\n" +
            "#...........#.......#...........#.#...#...#.........#.......#.....#...............#.....#...#.........#...#.#...#.....#...#...............#.#.....#.........#.........#.........#3#\n" +
            "#####.#####.#######.#.#######.#.#.###.#.#.#.#.#########.#####.#####.#######.#.###.#.#.#.#.###.#.#.#.#.#.#.###.#.#.#.#.#.#.###.#####.#######.###.###.#.#####.#.#.###.#.#.#######.#.#\n" +
            "#...........#.........#.........#...........#...#.....#.....#...................#.......#.........#.#.#.#.#.#...#.#.........#.#...#.....#...#.#.#.#.....#.#.#...#.#.....#.#.......#\n" +
            "#.###.#####.###.#.#.#.#.#.#.#####.###.#.#####.#.#.#.#####.###.###.###.#.#######.#.#.###.#.#.#######.#.#.#.#.#####.#.#.#.#.#.#.###.#######.###.###.#######.#.#.###.#####.#.###.###.#\n" +
            "#.....#...............#.#...#.....#...............#.......#.........#.#.#.........#.......#.....#...#.#.....#.....#.#...#.......#.#.#.#...#.....#.......#.#.#.#.#.#.#.#.......#...#\n" +
            "#.#.###.#.#.#.#.#####.#####.#.#.#.#.#.#####.#.#####.#.#.###.#####.#.#.#.#.###.#####.#.#.#.#.#.#.#.###.#####.#.#.###.#.#.###.#.#.#.#.#.#########.#######.#.#.###.#.#.#.#.#.#.###.#.#\n" +
            "#.#...#...#...#.............#.#.#.........#...#.........#.#.#...#...#...#.........#.#.....#.....#...........#.....#.#.....#.#...#.......#.#.......#.....#.#.#...#...#...#.#.......#\n" +
            "#.#.#.#.###.###.###.#####.#.#.#.#.#####.#.###.###.#.#.#.#.###.#.#.#.###.#.#.#####.#.#.#.###.#######.###.###.#.###.###.###.#.#.#.###.###.#.#.###.#.#.#.#.#.#.#####.#.###.#.#.#.#####\n" +
            "#...........#.......#.....#...#...#.......#.......#.........#...........#.#...#...#.#...#.........#.#.#.....#.......#.#...#...#.........#.....#.#.#.....#.........#.#...#.#...#...#\n" +
            "#.###.###.#.#.###.#.#.###.#####.#.#.###.#.###.###.#.###.###.#####.#.#.#.#.#.#.#.#.#.###.#.#######.#.#.###.#.#.###.#.#.#.#####.#.#.#####.#.#.#.#.#######.#.#.#.#.###.#.#.###.#.#.#.#\n" +
            "#.#0......#.#...............#.....#.#.#...#...#...................#...#.#...#...#.....#...#...#.#...#...........#.....#...#.....#.#.....#...#...#.....#...#.....#.......#...#.....#\n" +
            "#.###.#.#####.#####.#########.###.#.#.#######.#.#.#.#####.###.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.#.###.#.#.#######.#.#.###.#.#.#.#.#.#.#.#.#.###########.#.###.#.#.#.#.#.###.#\n" +
            "#.....#.............#.......#.#.....#.....#.#...#...#.#.#.....#.......#...#...#.#.......#...#.....#.....#...#.#.#...#...#.#.#.....#.#...#.....#.#...#.#.....#.#...#.......#...#...#\n" +
            "#.#.#.###.#.#.###.#.#.#.###.#.#.#####.#####.#.#.#####.#.#.#.#.###.#.#.###.#####.#.###.###.###.###.###.###.#.#.###.###.#.###.#.#.#.#####.#####.#.#.#.#.#.#.#.#.#.#.#.###.###.#.#.#.#\n" +
            "#.....#.#...#...#...#...#...#.....#.........#.......#...#...#.#.#...#.#.....#.....#.....#.....#...#...#.......#.................#.....#...#.....#...#.........#.#...#...#...#...#.#\n" +
            "###.#.#.###.#.#.#####.#.###.#.#.#.#.#.###.###.###.#.#.#.#.#.#.#.###.###.###.#.#.#.#.#.#####.#####.#.#####.###.#####.###########.###.#.#.###.#.#.#.#.#######.#.#.#.###.#.#.#.#.#####\n" +
            "#...#.#.......#.#.......#...#.....#.#.#...........#.#.#...#.........#...#...#.#...#.#.............#.............#...#.#...#...........#.#...#...#...#...#.#.#.....#.........#7#...#\n" +
            "#.#.#.#.#######.#.#.#.#.###.#.###.#.#.#.#######.###.#.#.#.#.#.###########.###.#.###.#.#.#.###.#########.#.#######.###.#.#.#.#.###.#.#.#.#.#.#.###.#.#.###.#.#######.#.#####.###.#.#\n" +
            "#...............#...#...#.....#...#.............#.#.#.#...#.#...#.#.......#.....#...#...#.#...#.#.........#.......#.#.....#...#.#.#.#...#.#.#.......#.#.#.....#.......#.#...#...#.#\n" +
            "###########.#.#.###.#####.#########.#####.#.###.#.#.#.#.#.#.###.#.#.#####.#####.#.#.###.###.###.#.#.#.#.#.#####.###.#####.#.###.#######.###.###.#.#.###.#.#.#.#.#.#.###.#.#.#.###.#\n" +
            "#.#...#.........#.#.......#...#.....#.#...#...#.......#.........#...#.#.........#.#.#.........#.#.#...#.....#...#.........#.#...#...#...#...#.....#...#.#.#.....#...#...#...#.....#\n" +
            "#.#.#.#.#.###.#.#.#######.#.#.#.###.#.#.#####.#######.#.#.#.#.#.###.#.###.#.#.#.#########.#.#.#.#.#.#.#.#.#.#.###.#.#.#.###.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#####.###.#.#.#.#.#.###.#\n" +
            "#...#.#...........#.......#...........#.......#.......#...#...#.#.#.....#.#...........#.#.#.....#.#.........#.....#.....#...#.............#...#...#.....#.....#.....#...#.#.#.#...#\n" +
            "#.#.#####.#.#####.#.#####.#########.###.#.###.###.#.#.#.#.#.###.#.#.#.#.#.#######.#.#.#.###.###.#.#.#####.#####.###.###.#.#######.#########.#####.#####.###.#.#######.#.#.#.#####.#\n" +
            "#.#.......#...#...#.....#.#6#.......#...#.#.......#.....#.....#...........#...#...#.#.....#.#.#...#.........#.........#.#.....#...#.........#...#.#.#...#.....#.#.....#.#.........#\n" +
            "#.#.#.#.#.#.#.#.#######.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#######.#.#.#.#.#.#.#.#.#.#.#.#####.#.###.#####.#####.#.#.###.#.###.#.#.#.#.#.#.#.###.#.#.#.###.#.###.#.#.#.###.###.#.#.#.#\n" +
            "#.#.#.#...#.#.....#.#.#.....#.................#...#.#.#.#...#...........#.#...#.......#...........#...#.........#.#.#.......#...#.......#...#.#...#.#...#...#.#.....#.......#...#.#\n" +
            "#.###.#.###.#.#.###.#.#.#.###.#########.#.#.#.#.#.#.#.#.#.#.#.#####.#.#.###.#.#.###.###.#.#.#.#.#.#.#####.#.#.#.###.#.#.#.#.#.#.#.#####.###.#.#.###.#####.###.#.#############.#.#.#\n" +
            "#.....#...#.#.........#.......#.....#...#.....#.#.......#...........#.......#.#.#.......#.....#.#.#.......#.....#...#...#...#.....#...#.....#.......#.........#.......#5#.......#.#\n" +
            "#.#####.#.#.#.###.###########.#.###.#.#####.#####.###.#####.#################.#.#.#.#.#.###.#####.###.###.###.#.###.###.#.#####.#.#.#.###.#.#####.#.###.#.###.#.###.#.#.#.#.#.###.#\n" +
            "#.#.....#...#.........#.....#.#.......#...#...#4#...#...#.#.#...#.....#...#.#...#.........#...#.............#...#.#.#.....#.........#.#.....#...........#.....#.#...#...#.#.....#.#\n" +
            "#.#.#.#.#.#.#########.#.#.#.#.#.#.#####.#.###.#.###.###.#.#.#.#.#.#.#.###.#.#######.#####.#.#.###.#.#.###.#.###.#.#.#.#####.#.###.#.#.###.###.#####.#.#.#.#####.#.#.#.###.#.###.#.#\n" +
            "#.#...#.....#.......#.....#...#...#.............#.#.#.....#...#...#...#.....#.#.#...#.....#...#...#.#.#.#...#.#.........#.#.......#.......#...#...#.......#.....#.#.#.....#...#...#\n" +
            "###################################################################################################################################################################################";

    public static void main(String[] args) {
        int result;

        // first part -- test
        result = solve("###########\n" +
                "#0.1.....2#\n" +
                "#.#######.#\n" +
                "#4.......3#\n" +
                "###########", true);
        System.out.println(result);
        assert result == 14;

        // first part
        result = solve(INPUT, true);
        System.out.println(result);
        assert result == 498;

        // second part
        result = solve(INPUT, false);
        System.out.println(result);
        assert result == 804;
    }

    private static int solve(String input, boolean first) {
        char[][] table = readTable(input);

        List<Vertex> vertexes = readVertexes(table);
        vertexes.stream().forEach(x -> System.out.print(" " + x));
        System.out.println();

        Map<String, Integer> distances = new HashMap<>();
        for (int i = 0; i < vertexes.size(); ++i) {
            Vertex from = vertexes.get(i);
            for (int j = i + 1; j < vertexes.size(); ++j) {
                Vertex to = vertexes.get(j);
                int distance = bfs(table, new State(from.x, from.y, null), to.value);
                assert distance != -1;
                distances.put(from + "-" + to, distance);
                distances.put(to + "-" + from, distance);
            }
        }

        List<List<Vertex>> routes = new ArrayList<>();
        Vertex[] tail = vertexes.stream().filter(x -> x != vertexes.get(0)).collect(Collectors.toList()).toArray(new Vertex[0]);
        List<Vertex[]> variants = new ArrayList<>();
        permutate(tail, 0, variants);
        for (Vertex[] variant : variants) {
            List<Vertex> route = new ArrayList<>();
            route.add(vertexes.get(0));
            Arrays.stream(variant).forEach(vertex -> route.add(vertex));
            if (!first) {
                route.add(vertexes.get(0));
            }
            routes.add(route);
        }

        int minDistance = Integer.MAX_VALUE;
        for (List<Vertex> route : routes) {
            int total = 0;
            for (int i = 0; i < route.size() - 1; ++i) {
                Vertex from = route.get(i);
                Vertex to = route.get(i + 1);
                total += distances.get(from + "-" + to);
            }
            minDistance = Math.min(total, minDistance);
        }

        return minDistance;
    }

    public static void permutate(Vertex[] list, int pointer, List<Vertex[]> variants) {
        if (pointer == list.length) {
            variants.add(list);
            return;
        }
        for (int i = pointer; i < list.length; i++) {
            Vertex[] permutation = list.clone();
            permutation[pointer] = list[i];
            permutation[i] = list[pointer];
            permutate(permutation, pointer + 1, variants);
        }
    }

    private static class Vertex {
        char value;
        int x, y;

        public Vertex(int x, int y, char value) {
            this.x = x;
            this.y = y;
            this.value = value;
        }

        @Override
        public String toString() {
            return '(' + String.valueOf(x) + ',' + String.valueOf(y) + ')' + value;
        }
    }

    private static List<Vertex> readVertexes(char[][] table) {
        List<Vertex> vertexes = new ArrayList<>();
        for (int i = 0; i < table.length; ++i) {
            for (int j = 0; j < table[i].length; ++j) {
                char value = table[i][j];
                if (value >= '0' && value <= '9') {
                    Vertex vertex = new Vertex(i, j, value);
                    vertexes.add(vertex);
                }
            }
        }
        return vertexes.stream().sorted((x, y) -> Character.compare(x.value, y.value)).collect(Collectors.toList());
    }

    private static char[][] readTable(String input) {
        String[] strings = input.split("\n");
        char[][] table = new char[strings.length][];
        for (int i = 0; i < strings.length; ++i) {
            table[i] = strings[i].toCharArray();
        }
        return table;
    }

    private static int bfs(char[][] table, State initial, char goal) {
        Set<State> closed = new HashSet<>();
        Set<State> opened = new HashSet<>();

        int count = 0;
        opened.add(initial);

        while (opened.size() > 0) {
            Set<State> achievable = new HashSet<>();
            for (State currentState : opened) {
                if (currentState.isEnd(table, goal)) {
                    //currentState.printSolution();
                    return count;
                }

                Set<State> set = currentState.generateNext(table);
                for (State nextState : set) {
                    if (!closed.contains(nextState)) {
                        achievable.add(nextState);
                    }
                }

                closed.add(currentState);
            }

            ++count;

            opened = achievable;
        }

        return -1;
    }

    private static class State {
        private State previousState;
        private int x, y;

        public State(int x, int y, State previousState) {
            this.x = x;
            this.y = y;
            this.previousState = previousState;
        }

        public Set<State> generateNext(char[][] table) {
            Set<State> set = new HashSet<>();

            set.add(generateState(table, x - 1, y));
            set.add(generateState(table, x + 1, y));
            set.add(generateState(table, x, y - 1));
            set.add(generateState(table, x, y + 1));

            set = set.stream().filter(x -> x != null).collect(Collectors.toSet());

            return set;
        }

        private State generateState(char[][] table, int newX, int newY) {
            if (newX < 0 || newY < 0 || newX >= table.length || newY >= table[0].length) return null;

            if (table[newX][newY] == '#') return null;

            return new State(newX, newY, this);
        }

        public boolean isEnd(char[][] table, char goal) {
            return table[x][y] == goal;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            State state = (State) o;

            if (x != state.x) return false;
            return y == state.y;
        }

        @Override
        public int hashCode() {
            int result = x;
            result = 31 * result + y;
            return result;
        }

        @Override
        public String toString() {
            return '(' + String.valueOf(x) + ',' + String.valueOf(y) + ')';
        }

        public void print() {
            System.out.println(this);
        }

        public void printSolution() {
            State item = this;
            int count = 1;
            do {
                System.out.println(count);
                System.out.println(item);
                ++count;
                item = item.previousState;
            } while (item != null);
        }
    }
}
